package com.lzdn.manage.conf;

import java.lang.reflect.Method;

import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.serializer.StringRedisSerializer;
//import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;

@Configuration
@EnableCaching
//@EnableRedisHttpSession
public class RedisConfig extends CachingConfigurerSupport{
//	
//	@Autowired
//	private JedisConnectionFactory jedisConnectionFactory;
//	
//	 @Bean public RedisSerializer jackson2JsonRedisSerializer(ObjectMapper
//			  objectMapper) { Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new
//			  Jackson2JsonRedisSerializer(Object.class);
//			 jackson2JsonRedisSerializer.setObjectMapper(objectMapper); 
//			 return new
//			 Jackson2JsonRedisSerializer(Object.class); }
	
	 @Bean  
	    public KeyGenerator wiselyKeyGenerator(){  
	        return new KeyGenerator() {  
	            @Override  
	            public Object generate(Object target, Method method, Object... params) {  
	                StringBuilder sb = new StringBuilder();  
	                sb.append(target.getClass().getName());  
	                sb.append(method.getName());  
	                for (Object obj : params) {  
	                    sb.append(obj.toString());  
	                }  
	                return sb.toString();  
	            }  
	        };  
	  
	    }  
	  
	    @Bean  
	    public CacheManager cacheManager(  
	            @SuppressWarnings("rawtypes") RedisTemplate redisTemplate) {  
	        return new RedisCacheManager(redisTemplate);  
	    }  
	
	/**
	 * 重写Redis序列化方式，使用Json方式:
	 * 当我们的数据存储到Redis的时候，我们的键（key）和值（value）都是通过Spring提供的Serializer序列化到数据库的。RedisTemplate默认使用的是JdkSerializationRedisSerializer，StringRedisTemplate默认使用的是StringRedisSerializer。
	 * Spring Data JPA为我们提供了下面的Serializer：
	 * GenericToStringSerializer、Jackson2JsonRedisSerializer、JacksonJsonRedisSerializer、JdkSerializationRedisSerializer、OxmSerializer、StringRedisSerializer。
	 * 在此我们将自己配置RedisTemplate并定义Serializer。
	 * 
	 * @param redisConnectionFactory
	 * @return
	 */
	@Bean
	public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {
		RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();
		redisTemplate.setConnectionFactory(redisConnectionFactory);

		Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<Object>(
				Object.class);
		ObjectMapper om = new ObjectMapper();
		om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
		om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
		jackson2JsonRedisSerializer.setObjectMapper(om);

		// 设置值（value）的序列化采用Jackson2JsonRedisSerializer。
		redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);
		// 设置键（key）的序列化采用StringRedisSerializer。
		redisTemplate.setKeySerializer(new StringRedisSerializer());

		redisTemplate.afterPropertiesSet();
		return redisTemplate;
	}

	/*
	 * 
	 * @Autowired private JedisConnectionFactory jedisConnectionFactory;
	 * 
	 * 
	 * @Bean public RedisSerializer jackson2JsonRedisSerializer(ObjectMapper
	 * objectMapper) { Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new
	 * Jackson2JsonRedisSerializer(Object.class);
	 * jackson2JsonRedisSerializer.setObjectMapper(objectMapper); return new
	 * Jackson2JsonRedisSerializer(Object.class); }
	 * 
	 * 
	 * @Bean public ObjectMapper objectMapper() { ObjectMapper objectMapper = new
	 * ObjectMapper(); return objectMapper; }
	 * 
	 * 
	 * @SuppressWarnings("rawtypes")
	 * 
	 * @Bean public RedisTemplate redisTemplate(RedisSerializer redisSerializer) {
	 * StringRedisTemplate redisTemplate = new
	 * StringRedisTemplate(jedisConnectionFactory);
	 * redisTemplate.setValueSerializer(redisSerializer);
	 * redisTemplate.afterPropertiesSet(); return redisTemplate; }
	 */
	}
